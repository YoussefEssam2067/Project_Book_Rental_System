<%- include('../partials/headerProfile') %>

<div class="container mt-5">
  <h1 class="text-center">My Rentals</h1>

  <% if (Object.keys(groupedRentals).length > 0) { %> <% for (let bookId in
  groupedRentals) { const { book, rentals } = groupedRentals[bookId]; %>
  <!-- Card for each book -->
  <div class="card mb-4">
    <div class="card-header d-flex align-items-center bg-primary">
      <img
        src="/uploads/books/thumbnails/<%= book.thumbnail %>"
        alt="<%= book.title %>"
        style="height: 50px; margin-right: 10px"
      />
      <strong
        class="<%= rentals.some(rental => rental.status === 'rented' || rental.status === 'started') ? '' : 'text-decoration-line-through' %> text-light"
      >
        <%= book.title %>
      </strong>
    </div>

    <!-- Card Body for rental details -->
    <div class="card-body">
      <% rentals.forEach(rental => { %>
      <div
        class="rental-details mb-3"
        style="border-bottom: 1px solid #ddd; padding-bottom: 10px"
      >
        <p>
          <strong>From:</strong> <%= new Date(rental.startDate).toLocaleString()
          %>
        </p>
        <p>
          <strong>To:</strong> <%= new Date(rental.endDate).toLocaleString() %>
        </p>
        <p><strong>Status:</strong> <%= rental.status %></p>
        <p>
          <strong>Time Remaining:</strong>
          <span id="countdown-<%= rental.id %>" class="text-danger"></span>
        </p>

        <!-- Read PDF link when rental is active -->
        <% const currentDate = new Date(); if (rental.status === 'started' &&
        rental.startDate <= currentDate && book.pdf) { %>
        <a
          href="/rentals/pdfViewer?pdf=<%= book.pdf %>&endDate=<%= rental.endDate %>"
          class="btn btn-info btn-sm"
          target="_blank"
        >
          Read PDF
        </a>
        <% } %>

        <!-- Add Review link when rental is finished -->
        <% if (rental.status === 'finished') { %>
        <p class="text-muted">This rental is finished.</p>
        <a href="/books/<%= book.id %>/review" class="btn btn-warning btn-sm">
          Add Review
        </a>
        <% } %>

        <!-- Edit and Delete options for rentals with "rented" status -->
        <% if (rental.status === 'rented') { %>
        <a href="/rentals/<%= rental.id %>/edit" class="btn btn-primary btn-sm">
          Edit
        </a>
        <form
          action="/rentals/<%= rental.id %>/delete"
          method="POST"
          style="display: inline-block"
        >
          <button type="submit" class="btn btn-danger btn-sm">Delete</button>
        </form>
        <% } %>
      </div>
      <% }) %>
    </div>
  </div>
  <% } %> <% } else { %>
  <p class="text-center">No rentals found.</p>
  <% } %>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const fetchRentalsAndInitializeCountdown = () => {
      fetch("/rentals/api")
        .then((response) => response.json())
        .then((groupedRentals) => {
          console.log(groupedRentals); // Log fetched rentals for debugging

          Object.values(groupedRentals).forEach(({ rentals }) => {
            rentals.forEach((rental) => {
              const countdownElement = document.getElementById(
                `countdown-${rental.id}`
              );
              if (!countdownElement) return;

              const updateCountdown = () => {
                const now = new Date().getTime();
                const startTime = new Date(rental.startDate).getTime();
                const endTime = new Date(rental.endDate).getTime();

                if (startTime > now) {
                  // Countdown to start date
                  const timeUntilStart = startTime - now;

                  const days = Math.floor(
                    timeUntilStart / (1000 * 60 * 60 * 24)
                  );
                  const hours = Math.floor(
                    (timeUntilStart % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
                  );
                  const minutes = Math.floor(
                    (timeUntilStart % (1000 * 60 * 60)) / (1000 * 60)
                  );
                  const seconds = Math.floor(
                    (timeUntilStart % (1000 * 60)) / 1000
                  );

                  countdownElement.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;

                  if (timeUntilStart <= 1000) {
                    setTimeout(() => {
                      console.log("Reloading page as rental has started...");
                      location.reload();
                    }, 1000);
                  }
                } else if (endTime > now) {
                  // Countdown to end date
                  const timeUntilEnd = endTime - now;

                  const days = Math.floor(timeUntilEnd / (1000 * 60 * 60 * 24));
                  const hours = Math.floor(
                    (timeUntilEnd % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
                  );
                  const minutes = Math.floor(
                    (timeUntilEnd % (1000 * 60 * 60)) / (1000 * 60)
                  );
                  const seconds = Math.floor(
                    (timeUntilEnd % (1000 * 60)) / 1000
                  );

                  countdownElement.textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;

                  if (timeUntilEnd <= 1000) {
                    setTimeout(() => {
                      console.log("Reloading page as rental has ended...");
                      location.reload();
                    }, 1000);
                  }
                } else {
                  countdownElement.textContent = "Time Expired";
                }
              };

              // Update countdown every second
              setInterval(updateCountdown, 1000);
            });
          });
        })
        .catch((error) => console.error("Error fetching rentals:", error));
    };

    // Fetch rentals and initialize countdowns
    fetchRentalsAndInitializeCountdown();
  });
</script>

<%- include('../partials/footer') %>
