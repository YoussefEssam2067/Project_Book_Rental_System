<%- include('../partials/headerProfile') %>

<div class="top-bar">
  <button class="btn" id="prev-page">
    <i class="fas fa-arrow-circle-left"></i>
  </button>
  <span class="page-info">
    Page <span id="page-num"></span> of <span id="page-count"></span>
  </span>
  <button class="btn" id="next-page">
    <i class="fas fa-arrow-circle-right"></i>
  </button>
</div>

<style>
  .top-bar {
    display: flex;
    justify-content: center; /* Center the content */
    align-items: center; /* Align items vertically */
    background-color: #f4f4f9; /* Light background */
    border: 1px solid #ddd; /* Subtle border */
    border-radius: 5px; /* Rounded corners */
    padding: 10px 20px; /* Padding for spacing */
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    margin-bottom: 20px; /* Spacing from other elements */
    gap: 20px; /* Space between arrows and page info */
  }

  .btn {
    background-color: #007bff; /* Primary blue color */
    color: white; /* Text color */
    border: none; /* Remove border */
    padding: 10px; /* Padding for buttons */
    border-radius: 50%; /* Circle shape */
    cursor: pointer; /* Pointer cursor for interactivity */
    font-size: 18px; /* Adjust icon size */
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s; /* Smooth hover effect */
  }

  .btn:hover {
    background-color: #0056b3; /* Darker blue on hover */
  }

  .btn i {
    margin: 0; /* Remove any extra spacing */
  }

  .page-info {
    font-size: 18px; /* Adjust font size */
    font-weight: bold; /* Make text bold */
    color: #333; /* Darker text for readability */
    text-align: center; /* Center align text */
    min-width: 120px; /* Fixed width for consistency */
  }
</style>

<div class="canvas-container">
  <canvas id="pdf-render"></canvas>
</div>

<style>
  .canvas-container {
    display: flex;
    justify-content: center; /* Center horizontally */
    align-items: center; /* Center vertically */
    min-height: 100vh; /* Full viewport height */
    background-color: #f4f4f9; /* Optional background color */
  }

  canvas {
    border: 1px solid #ddd; /* Optional border */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Optional shadow for style */
  }
</style>

<!-- PDF.js Library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>

<script>
  const url = "<%= pdfUrl %>"; // The PDF URL passed from the controller
  const endDate = "<%= endDate %>"; // The end date passed from the controller

  let pdfDoc = null,
    pageNum = 1,
    pageIsRendering = false,
    pageNumIsPending = null;

  const scale = 1.5,
    canvas = document.querySelector("#pdf-render"),
    ctx = canvas.getContext("2d");

  // Render the page
  const renderPage = (num) => {
    pageIsRendering = true;

    // Get page
    pdfDoc.getPage(num).then((page) => {
      // Set scale
      const viewport = page.getViewport({ scale });
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      const renderCtx = {
        canvasContext: ctx,
        viewport,
      };

      page.render(renderCtx).promise.then(() => {
        pageIsRendering = false;

        if (pageNumIsPending !== null) {
          renderPage(pageNumIsPending);
          pageNumIsPending = null;
        }
      });

      // Output current page
      document.querySelector("#page-num").textContent = num;
    });
  };

  // Check for pages rendering
  const queueRenderPage = (num) => {
    if (pageIsRendering) {
      pageNumIsPending = num;
    } else {
      renderPage(num);
    }
  };

  // Show Prev Page
  const showPrevPage = () => {
    if (pageNum <= 1) {
      return;
    }
    pageNum--;
    queueRenderPage(pageNum);
  };

  // Show Next Page
  const showNextPage = () => {
    if (pageNum >= pdfDoc.numPages) {
      return;
    }
    pageNum++;
    queueRenderPage(pageNum);
  };

  // Get Document
  pdfjsLib
    .getDocument(url)
    .promise.then((pdfDoc_) => {
      pdfDoc = pdfDoc_;

      document.querySelector("#page-count").textContent = pdfDoc.numPages;

      renderPage(pageNum);
    })
    .catch((err) => {
      const div = document.createElement("div");
      div.className = "error";
      div.appendChild(document.createTextNode(err.message));
      document.querySelector("body").insertBefore(div, canvas);
      document.querySelector(".top-bar").style.display = "none";
    });

  // Button Events
  document.querySelector("#prev-page").addEventListener("click", showPrevPage);
  document.querySelector("#next-page").addEventListener("click", showNextPage);

  // Check if the endDate has passed and close the page if it has
  document.addEventListener("DOMContentLoaded", () => {
    const now = new Date();
    const rentalEndDate = new Date(endDate); // Assuming endDate is a valid date string

    // Subtract 2 hours (2 hours * 60 minutes * 60 seconds * 1000 milliseconds)
    rentalEndDate.setHours(rentalEndDate.getHours() - 2);

    if (rentalEndDate > now) {
      // If the endDate is in the past, close the page
      const timeUntilEnd = rentalEndDate - now;
      console.log(timeUntilEnd);

      setTimeout(() => {
        console.log("Rental has ended. Closing page...");
        window.close(); // This closes the current window
      }, timeUntilEnd);
    }
  });
</script>

<%- include('../partials/footer') %>
